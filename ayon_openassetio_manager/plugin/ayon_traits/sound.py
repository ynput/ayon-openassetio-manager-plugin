
"""
Trait definitions in the 'sound' namespace.

Traits related to sound.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio import TraitsData


class AudioTrait:
    """
    A trait indicating a sound.
    Usage: entity
    """
    kId = "Ayon:sound.Audio"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setBitDepth(self, bitDepth: int):
        """
        Sets the bitDepth property.

        Bit depth of the sound.
        """
        if not isinstance(bitDepth, int):
            raise TypeError("bitDepth must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "bitDepth", bitDepth)

    def getBitDepth(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the bitDepth property or the supplied default.

        Bit depth of the sound.
        """
        value = self.__data.getTraitProperty(self.kId, "bitDepth")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    def setChannels(self, channels: int):
        """
        Sets the channels property.

        Number of channels in the sound.
        """
        if not isinstance(channels, int):
            raise TypeError("channels must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "channels", channels)

    def getChannels(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the channels property or the supplied default.

        Number of channels in the sound.
        """
        value = self.__data.getTraitProperty(self.kId, "channels")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    def setCompression(self, compression: str):
        """
        Sets the compression property.

        Compression of the sound.
        """
        if not isinstance(compression, str):
            raise TypeError("compression must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "compression", compression)

    def getCompression(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the compression property or the supplied default.

        Compression of the sound.
        """
        value = self.__data.getTraitProperty(self.kId, "compression")
        if value is None:
            return defaultValue

        if not isinstance(value, str):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setDuration(self, duration: float):
        """
        Sets the duration property.

        Duration of the sound in seconds.
        """
        if not isinstance(duration, float):
            raise TypeError("duration must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "duration", duration)

    def getDuration(self, defaultValue: float=None) -> Union[float, None]:
        """
        Gets the value of the duration property or the supplied default.

        Duration of the sound in seconds.
        """
        value = self.__data.getTraitProperty(self.kId, "duration")
        if value is None:
            return defaultValue

        if not isinstance(value, float):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'float'.")
            return defaultValue
        return value
        
    def setSampleRate(self, sampleRate: int):
        """
        Sets the sampleRate property.

        Sample rate of the sound.
        """
        if not isinstance(sampleRate, int):
            raise TypeError("sampleRate must be a 'int'.")
        self.__data.setTraitProperty(self.kId, "sampleRate", sampleRate)

    def getSampleRate(self, defaultValue: int=None) -> Union[int, None]:
        """
        Gets the value of the sampleRate property or the supplied default.

        Sample rate of the sound.
        """
        value = self.__data.getTraitProperty(self.kId, "sampleRate")
        if value is None:
            return defaultValue

        if not isinstance(value, int):
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'int'.")
            return defaultValue
        return value
        
    

